<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>NaivePyDECOMP package</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="naivepydecomp-package">
<h1>NaivePyDECOMP package</h1>
<section id="module-NaivePyDECOMP">
<span id="module-contents"></span><h2>Module contents</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Package: NaivePyDECOMP</p>
<section id="author">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="description">
<h3>Description</h3>
<p>The <code class="docutils literal notranslate"><span class="pre">NaivePyDECOMP</span></code> package provides a modular, extensible, and pedagogically
oriented framework for short-term power system operation planning. Inspired by the
methodology and architecture of CEPEL’s DESSEM model, it enables the construction,
solution, and analysis of mixed-integer optimization models based on Pyomo.</p>
<p>Designed for academic use, the framework supports detailed modeling of thermal,
hydraulic, renewable, and storage resources, and integrates these components
into a coherent multi-technology dispatch problem, including unit commitment,
deficit handling, and economic trade-offs.</p>
</section>
<section id="submodules">
<h3>Submodules</h3>
<dl class="simple">
<dt>HydraulicGenerator</dt><dd><p>Defines the data structures, constraints, and productivity models for
hydropower generation units, including reservoir dynamics, turbine flows,
and different formulations of head and productivity (constant, specific, exact).</p>
</dd>
<dt>ThermalGenerator</dt><dd><p>Models thermal units with quadratic or piecewise-linear cost functions,
ramping constraints, commitment logic, startup/shutdown dynamics, and reserve provision.</p>
</dd>
<dt>RenewableGenerator</dt><dd><p>Represents non-dispatchable renewable units such as wind and solar,
enforcing production bounds based on availability (gbar).</p>
</dd>
<dt>Storage</dt><dd><p>Models energy storage systems (e.g., batteries), capturing state-of-charge dynamics,
charge/discharge power limits, efficiencies, and optional integration into
the balance and objective.</p>
</dd>
<dt>YAMLLoader</dt><dd><p>Provides the interface for loading problem instances from structured YAML or JSON files,
including validation and conversion into dataclass objects.</p>
</dd>
<dt>Builder</dt><dd><p>Constructs a complete Pyomo model from the YAML data, invoking the appropriate
subsystems and assembling the balance constraint and cost-minimizing objective.</p>
</dd>
<dt>Solver</dt><dd><p>Handles the selection and execution of solvers (e.g., GLPK, IPOPT, MindtPy),
with optional reporting and solution validation.</p>
</dd>
<dt>DataFrames</dt><dd><p>Exports decision variable trajectories and economic indicators to Pandas DataFrames
for further analysis and visualization.</p>
</dd>
<dt>PlotSeries</dt><dd><p>Generates basic time-series plots of dispatch results using Matplotlib.</p>
</dd>
<dt>Utils, Formatters, Reporting</dt><dd><p>Auxiliary modules for formatting, printing summaries, validating model structure,
and providing colored console outputs using Colorama.</p>
</dd>
</dl>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>The package is intentionally modular: each subsystem (Thermal, Hydro, Renewable, Storage)
can be activated or omitted via the YAML interface.</p></li>
<li><p>While conceptually aligned with DESSEM, the implementation is simplified and transparent,
allowing students and researchers to explore, extend, and test new ideas.</p></li>
<li><p>Extensions such as emission penalties, pumped storage, stochastic scenarios,
or multi-area coupling can be added atop this foundation.</p></li>
<li><p>Fully compatible with Pyomo’s expressive modeling capabilities and solver interface.</p></li>
</ul>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
</section>
<section id="subpackages">
<h2>Subpackages</h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml">NaivePyDECOMP.HydraulicGenerator package</a><ul>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator">Module contents</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#author">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#description">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#submodules">Submodules</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id1">Submodules</a></li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator.HydraulicConstraints">NaivePyDECOMP.HydraulicGenerator.HydraulicConstraints module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#hydropower-constraints-module-for-multi-mode-generation-modeling">Hydropower Constraints Module for Multi-Mode Generation Modeling</a><ul>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#imported-dependencies">Imported Dependencies</a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#functions">Functions</a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#model-requirements">Model Requirements</a></li>
</ul>
</li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicConstraints.add_hydro_volume_continuity_constraint"><code class="docutils literal notranslate"><span class="pre">add_hydro_volume_continuity_constraint()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes">NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id2">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#overview">Overview</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#conventions-and-units">Conventions and Units</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicData"><code class="docutils literal notranslate"><span class="pre">HydraulicData</span></code></a><ul>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicData.Cdef"><code class="docutils literal notranslate"><span class="pre">HydraulicData.Cdef</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicData.demand"><code class="docutils literal notranslate"><span class="pre">HydraulicData.demand</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicData.horizon"><code class="docutils literal notranslate"><span class="pre">HydraulicData.horizon</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicData.units"><code class="docutils literal notranslate"><span class="pre">HydraulicData.units</span></code></a></li>
</ul>
</li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit</span></code></a><ul>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.Qmax"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.Qmax</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.Qmin"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.Qmin</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.Vini"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.Vini</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.Vmax"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.Vmax</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.Vmin"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.Vmin</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.afluencia"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.afluencia</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.compute_total_inflow"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.compute_total_inflow</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.name"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.name</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.p"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.p</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicDataTypes.HydraulicUnit.upstreams"><code class="docutils literal notranslate"><span class="pre">HydraulicUnit.upstreams</span></code></a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator.HydraulicEquations">NaivePyDECOMP.HydraulicGenerator.HydraulicEquations module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id3">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id4">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#intended-use">Intended Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator.HydraulicGeneratorBuilder">NaivePyDECOMP.HydraulicGenerator.HydraulicGeneratorBuilder module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id5">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#supported-generation-modes-per-unit">Supported generation modes (per unit)</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id6">Functions</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#modeling-conventions-and-units">Modeling Conventions and Units</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicGeneratorBuilder.add_hydro_problem"><code class="docutils literal notranslate"><span class="pre">add_hydro_problem()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicGeneratorBuilder.add_hydro_subproblem"><code class="docutils literal notranslate"><span class="pre">add_hydro_subproblem()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicGeneratorBuilder.build_FPHs"><code class="docutils literal notranslate"><span class="pre">build_FPHs()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicGeneratorBuilder.build_hydro_dispatch"><code class="docutils literal notranslate"><span class="pre">build_hydro_dispatch()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator.HydraulicObjectives">NaivePyDECOMP.HydraulicGenerator.HydraulicObjectives module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id7">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id8">Functions</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id9">Modeling Conventions and Units</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator.HydraulicVars">NaivePyDECOMP.HydraulicGenerator.HydraulicVars module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id10">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id11">Functions</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id12">Modeling Conventions and Units</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#NaivePyDECOMP.HydraulicGenerator.HydraulicVars.hydraulyc_add_sets_and_params"><code class="docutils literal notranslate"><span class="pre">hydraulyc_add_sets_and_params()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#module-NaivePyDECOMP.HydraulicGenerator.SimplifiedConstantProductivityFPH">NaivePyDECOMP.HydraulicGenerator.SimplifiedConstantProductivityFPH module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id13">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.HydraulicGenerator.xhtml#id14">Description</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml">NaivePyDECOMP.RenewableGenerator package</a><ul>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#module-NaivePyDECOMP.RenewableGenerator">Module contents</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#author">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#description">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#submodules">Submodules</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id1">Submodules</a></li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#module-NaivePyDECOMP.RenewableGenerator.RenewableConstraints">NaivePyDECOMP.RenewableGenerator.RenewableConstraints module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id2">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id3">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#functions">Functions</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#module-NaivePyDECOMP.RenewableGenerator.RenewableDataTypes">NaivePyDECOMP.RenewableGenerator.RenewableDataTypes module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id4">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id5">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#classes">Classes</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#module-NaivePyDECOMP.RenewableGenerator.RenewableEquations">NaivePyDECOMP.RenewableGenerator.RenewableEquations module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id6">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id7">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#intended-use">Intended Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#module-NaivePyDECOMP.RenewableGenerator.RenewableGeneratorBuilder">NaivePyDECOMP.RenewableGenerator.RenewableGeneratorBuilder module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id8">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id9">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id10">Functions</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#NaivePyDECOMP.RenewableGenerator.RenewableGeneratorBuilder.add_renewable_subproblem"><code class="docutils literal notranslate"><span class="pre">add_renewable_subproblem()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#module-NaivePyDECOMP.RenewableGenerator.RenewableObjectives">NaivePyDECOMP.RenewableGenerator.RenewableObjectives module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id11">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id12">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id13">Functions</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#module-NaivePyDECOMP.RenewableGenerator.RenewableVars">NaivePyDECOMP.RenewableGenerator.RenewableVars module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id14">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id15">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.RenewableGenerator.xhtml#id16">Functions</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml">NaivePyDECOMP.Storage package</a><ul>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#module-NaivePyDECOMP.Storage">Module contents</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#author">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#description">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#submodules">Submodules</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id1">Submodules</a></li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#module-NaivePyDECOMP.Storage.StorageBuilder">NaivePyDECOMP.Storage.StorageBuilder module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id2">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id3">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#functions">Functions</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#NaivePyDECOMP.Storage.StorageBuilder.add_storage_subproblem"><code class="docutils literal notranslate"><span class="pre">add_storage_subproblem()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#module-NaivePyDECOMP.Storage.StorageConstraints">NaivePyDECOMP.Storage.StorageConstraints module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id4">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id5">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id6">Functions</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#module-NaivePyDECOMP.Storage.StorageDataTypes">NaivePyDECOMP.Storage.StorageDataTypes module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id7">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id8">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#classes">Classes</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#module-NaivePyDECOMP.Storage.StorageEquations">NaivePyDECOMP.Storage.StorageEquations module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id9">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id10">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#intended-use">Intended Use</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#module-NaivePyDECOMP.Storage.StorageObjective">NaivePyDECOMP.Storage.StorageObjective module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id11">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id12">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id13">Functions</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#module-NaivePyDECOMP.Storage.StorageVars">NaivePyDECOMP.Storage.StorageVars module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id14">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id15">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.Storage.xhtml#id16">Functions</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml">NaivePyDECOMP.ThermalGenerator package</a><ul>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#module-NaivePyDECOMP.ThermalGenerator">Module contents</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#author">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#description">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#submodules">Submodules</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id1">Submodules</a></li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#module-NaivePyDECOMP.ThermalGenerator.ThermalConstraints">NaivePyDECOMP.ThermalGenerator.ThermalConstraints module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id2">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id3">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#constraint-families">Constraint Families</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#usage">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalConstraints.thermal_add_balance_constraint"><code class="docutils literal notranslate"><span class="pre">thermal_add_balance_constraint()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalConstraints.thermal_add_capacity_constraint"><code class="docutils literal notranslate"><span class="pre">thermal_add_capacity_constraint()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#module-NaivePyDECOMP.ThermalGenerator.ThermalDataTypes">NaivePyDECOMP.ThermalGenerator.ThermalDataTypes module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id4">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id5">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#notation-per-unit-g-and-time-t">Notation (per unit g and time t)</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#typical-objective-miqp-form">Typical objective (MIQP form)</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id6">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#intended-pairing">Intended pairing</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><code class="docutils literal notranslate"><span class="pre">ThermalData</span></code></a><ul>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.Cdef"><code class="docutils literal notranslate"><span class="pre">ThermalData.Cdef</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.demand"><code class="docutils literal notranslate"><span class="pre">ThermalData.demand</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.horizon"><code class="docutils literal notranslate"><span class="pre">ThermalData.horizon</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.units"><code class="docutils literal notranslate"><span class="pre">ThermalData.units</span></code></a></li>
</ul>
</li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit"><code class="docutils literal notranslate"><span class="pre">ThermalUnit</span></code></a><ul>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.Cost"><code class="docutils literal notranslate"><span class="pre">ThermalUnit.Cost</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.Gmax"><code class="docutils literal notranslate"><span class="pre">ThermalUnit.Gmax</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.Gmin"><code class="docutils literal notranslate"><span class="pre">ThermalUnit.Gmin</span></code></a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.name"><code class="docutils literal notranslate"><span class="pre">ThermalUnit.name</span></code></a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#module-NaivePyDECOMP.ThermalGenerator.ThermalEquations">NaivePyDECOMP.ThermalGenerator.ThermalEquations module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id7">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id8">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#intended-use">Intended Use</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalEquations.add_thermal_balance_expression"><code class="docutils literal notranslate"><span class="pre">add_thermal_balance_expression()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalEquations.add_thermal_cost_expression"><code class="docutils literal notranslate"><span class="pre">add_thermal_cost_expression()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#module-NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder">NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id9">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id10">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#builder-function">Builder Function</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id11">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.add_thermal_problem"><code class="docutils literal notranslate"><span class="pre">add_thermal_problem()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.add_thermal_subproblem"><code class="docutils literal notranslate"><span class="pre">add_thermal_subproblem()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.build_thermal_uc"><code class="docutils literal notranslate"><span class="pre">build_thermal_uc()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.thermo_update_model"><code class="docutils literal notranslate"><span class="pre">thermo_update_model()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#module-NaivePyDECOMP.ThermalGenerator.ThermalObjectives">NaivePyDECOMP.ThermalGenerator.ThermalObjectives module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id12">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id13">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id14">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalObjectives.set_objective_thermo"><code class="docutils literal notranslate"><span class="pre">set_objective_thermo()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#module-NaivePyDECOMP.ThermalGenerator.ThermalVars">NaivePyDECOMP.ThermalGenerator.ThermalVars module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id15">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id16">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#features">Features</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#variables">Variables</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#id17">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalVars.thermal_add_sets_and_params"><code class="docutils literal notranslate"><span class="pre">thermal_add_sets_and_params()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.ThermalGenerator.xhtml#NaivePyDECOMP.ThermalGenerator.ThermalVars.thermal_add_variables_uc"><code class="docutils literal notranslate"><span class="pre">thermal_add_variables_uc()</span></code></a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml">NaivePyDECOMP.cli package</a><ul>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#module-NaivePyDECOMP.cli">Module contents</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#naivepydecomp-cli-subpackage">NaivePyDECOMP – CLI Subpackage</a><ul>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#author">Author</a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#description">Description</a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#modules">Modules</a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#features">Features</a></li>
<li class="toctree-l4"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#example-usage">Example Usage</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#submodules">Submodules</a></li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#module-NaivePyDECOMP.cli.cli">NaivePyDECOMP.cli.cli module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id1">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id2">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id3">Features</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#dependencies">Dependencies</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#usage">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.cli.main"><code class="docutils literal notranslate"><span class="pre">main()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.cli.print_welcome_banner"><code class="docutils literal notranslate"><span class="pre">print_welcome_banner()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.cli.save_dataframe"><code class="docutils literal notranslate"><span class="pre">save_dataframe()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#module-NaivePyDECOMP.cli.pddd_cli">NaivePyDECOMP.cli.pddd_cli module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id4">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id5">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id6">Features</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id7">Dependencies</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id8">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.pddd_cli.main"><code class="docutils literal notranslate"><span class="pre">main()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.pddd_cli.print_welcome_banner"><code class="docutils literal notranslate"><span class="pre">print_welcome_banner()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.pddd_cli.save_dataframe"><code class="docutils literal notranslate"><span class="pre">save_dataframe()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#module-NaivePyDECOMP.cli.plot_cli">NaivePyDECOMP.cli.plot_cli module</a><ul>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id9">Author</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id10">Description</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id11">Features</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#categories">Categories</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id12">Dependencies</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#id13">Usage</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#quick-examples">Quick examples</a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.handle_plot"><code class="docutils literal notranslate"><span class="pre">handle_plot()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.handle_table"><code class="docutils literal notranslate"><span class="pre">handle_table()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.load_dataframe"><code class="docutils literal notranslate"><span class="pre">load_dataframe()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.main"><code class="docutils literal notranslate"><span class="pre">main()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.print_welcome_banner"><code class="docutils literal notranslate"><span class="pre">print_welcome_banner()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.prompt"><code class="docutils literal notranslate"><span class="pre">prompt()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.select_columns_multi"><code class="docutils literal notranslate"><span class="pre">select_columns_multi()</span></code></a></li>
<li class="toctree-l3"><a class="reference internal" href="NaivePyDECOMP.cli.xhtml#NaivePyDECOMP.cli.plot_cli.select_variable_columns"><code class="docutils literal notranslate"><span class="pre">select_variable_columns()</span></code></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</section>
<section id="id1">
<h2>Submodules</h2>
</section>
<section id="module-NaivePyDECOMP.Builder">
<span id="naivepydecomp-builder-module"></span><h2>NaivePyDECOMP.Builder module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Module: Model Builder from YAML Configuration</p>
<section id="id2">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id3">
<h3>Description</h3>
<p>This module provides a unified interface for constructing a Pyomo-based
economical dispatch model from structured YAML or JSON input files.
It supports integration of multiple subsystems, including:</p>
<ul class="simple">
<li><p>Hydraulic generation units (UHEs)</p></li>
<li><p>Thermal generation units (UTs)</p></li>
<li><p>Renewable generators</p></li>
<li><p>Storage systems (batteries or reservoirs)</p></li>
<li><p>Deficit penalty model</p></li>
</ul>
<p>The model construction includes:</p>
<ul class="simple">
<li><p>Validation of structural consistency in input data.</p></li>
<li><p>Object-oriented dataclass translation of YAML structures.</p></li>
<li><p>Modular assembly of each subsystem’s variables and constraints.</p></li>
<li><p>Construction of system-wide power balance constraint.</p></li>
<li><p>Cost-based objective function including startup, generation, and deficit costs.</p></li>
</ul>
</section>
<section id="usage">
<h3>Usage</h3>
<p>Use <cite>build_model_from_file(path)</cite> as the main entry point.</p>
<p>Ensure the YAML file has at least a <cite>meta</cite> section and one
of the technology sections: <cite>hydro</cite>, <cite>thermal</cite>, <cite>renewable</cite>, or <cite>storage</cite>.</p>
<dl class="field-list simple">
<dt class="field-odd">returns<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p>Pyomo ConcreteModel ready for optimization.</p></li>
<li><p>Parsed dictionary representing the structured case.</p></li>
</ul>
</dd>
<dt class="field-even">rtype<span class="colon">:</span></dt>
<dd class="field-even"><p>Tuple[ConcreteModel, dict]</p>
</dd>
</dl>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Builder.build_balance_and_objective_from_yaml">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Builder.</span></span><span class="sig-name descname"><span class="pre">build_balance_and_objective_from_yaml</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">yaml_data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span><span class="p"><span class="pre">[</span></span><span class="pre">str</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd><p>Construct the system-wide power balance constraint and total cost objective.</p>
<p>This function scans the parsed YAML content to determine which technologies
(thermal, hydro, storage, renewable) are present, and invokes their respective
expression builders to construct:</p>
<ul class="simple">
<li><p>model.Balance: a time-indexed Constraint for supply-demand balance</p></li>
<li><p>model.OBJ: an Objective for cost minimization</p></li>
</ul>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>model</strong> (<em>ConcreteModel</em>) – A Pyomo model with required sets and variables already declared.</p></li>
<li><p><strong>yaml_data</strong> (<em>dict</em>) – Parsed YAML dictionary with subsections for each technology.</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The input model with balance constraints and objective function added.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>ConcreteModel</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Builder.build_model_from_data">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Builder.</span></span><span class="sig-name descname"><span class="pre">build_model_from_data</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">root</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">Tuple</span><span class="p"><span class="pre">[</span></span><span class="pre">ConcreteModel</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">Dict</span><span class="p"><span class="pre">]</span></span></span></span></dt>
<dd><p>build subsystem models from data.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>root</strong> (<em>str</em>) – system description.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A tuple with the builded model and the parsed case file</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>Tuple[pyomo.environ.ConcreteModel, Dict]</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><strong>ValueError</strong> – On structural or validation errors in the input file.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Builder.build_model_from_file">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Builder.</span></span><span class="sig-name descname"><span class="pre">build_model_from_file</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">str</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">Tuple</span><span class="p"><span class="pre">[</span></span><span class="pre">ConcreteModel</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">Dict</span><span class="p"><span class="pre">]</span></span></span></span></dt>
<dd><p>Load master data from YAML/JSON and build subsystem models.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>path</strong> (<em>str</em>) – Path to a YAML file with sections: meta, demand, and one or
more of {hydro, thermal, renewable, storage}.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A tuple with the builded model and the parsed case file</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>Tuple[pyomo.environ.ConcreteModel, Dict]</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><strong>ValueError</strong> – On structural or validation errors in the input file.</p>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.BuilderPDDD">
<span id="naivepydecomp-builderpddd-module"></span><h2>NaivePyDECOMP.BuilderPDDD module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Module: Model Builder from YAML Configuration</p>
<section id="id4">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id5">
<h3>Description</h3>
<p>This module provides a unified interface for constructing a Pyomo-based
economical dispatch model from structured YAML or JSON input files.
It supports integration of multiple subsystems, including:</p>
<ul class="simple">
<li><p>Hydraulic generation units (UHEs)</p></li>
<li><p>Thermal generation units (UTs)</p></li>
<li><p>Renewable generators</p></li>
<li><p>Storage systems (batteries or reservoirs)</p></li>
<li><p>Deficit penalty model</p></li>
</ul>
<p>The model construction includes:</p>
<ul class="simple">
<li><p>Validation of structural consistency in input data.</p></li>
<li><p>Object-oriented dataclass translation of YAML structures.</p></li>
<li><p>Modular assembly of each subsystem’s variables and constraints.</p></li>
<li><p>Construction of system-wide power balance constraint.</p></li>
<li><p>Cost-based objective function including startup, generation, and deficit costs.</p></li>
</ul>
</section>
<section id="id6">
<h3>Usage</h3>
<p>Use <cite>build_model_from_file(path)</cite> as the main entry point.</p>
<p>Ensure the YAML file has at least a <cite>meta</cite> section and one
of the technology sections: <cite>hydro</cite>, <cite>thermal</cite>, <cite>renewable</cite>, or <cite>storage</cite>.</p>
<dl class="field-list simple">
<dt class="field-odd">returns<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p>Pyomo ConcreteModel ready for optimization.</p></li>
<li><p>Parsed dictionary representing the structured case.</p></li>
</ul>
</dd>
<dt class="field-even">rtype<span class="colon">:</span></dt>
<dd class="field-even"><p>Tuple[ConcreteModel, dict]</p>
</dd>
</dl>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.BuilderPDDD.build_pddd_balance_and_objective_from_yaml">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.BuilderPDDD.</span></span><span class="sig-name descname"><span class="pre">build_pddd_balance_and_objective_from_yaml</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">yaml_data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span><span class="p"><span class="pre">[</span></span><span class="pre">str</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stage</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cuts</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd><p>Construct the system-wide power balance constraint and total cost objective
along with the model itself.</p>
<p>This function scans the parsed YAML content to determine which technologies
(thermal, hydro, storage, renewable) are present, and invokes their respective
expression builders to construct:</p>
<ul class="simple">
<li><p>PDDD Model</p></li>
<li><p>model.Balance: a time-indexed Constraint for supply-demand balance</p></li>
<li><p>model.OBJ: an Objective for cost minimization</p></li>
</ul>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>yaml_data</strong> (<em>dict</em>) – Parsed YAML dictionary with subsections for each technology.</p></li>
<li><p><strong>stage</strong> (<em>int</em>) – PDDD Stage</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The input model with balance constraints and objective function added.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>ConcreteModel</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.BuilderPDDD.build_pddd_data_from_file">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.BuilderPDDD.</span></span><span class="sig-name descname"><span class="pre">build_pddd_data_from_file</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">str</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">Dict</span></span></span></dt>
<dd><p>Load master data from YAML/JSON and build subsystem models.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>path</strong> (<em>str</em>) – Path to a YAML file with sections: meta, demand, and one or
more of {hydro, thermal, renewable, storage}.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>the parsed case file</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>Dict</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><strong>ValueError</strong> – On structural or validation errors in the input file.</p>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.DataFrames">
<span id="naivepydecomp-dataframes-module"></span><h2>NaivePyDECOMP.DataFrames module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Utility: Build Dispatch DataFrame from Pyomo Model Results</p>
<section id="id7">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id8">
<h3>Description</h3>
<p>This utility extracts time series of dispatch decisions from a solved
Pyomo model and compiles them into a structured pandas DataFrame. It
supports hydropower, thermal generation, renewable sources, and storage
systems. The output can be used for reporting, visualization, or export
to CSV.</p>
<p>Main components extracted:
- Hydropower: turbined flow, storage volume, generation, spillage.
- Thermal: power output, on/off status, startup/shutdown, reserves.
- Renewable: available generation by unit.
- Storage: charge/discharge power, net injection, state of charge.
- System-wide: demand, deficit, cost components (variable, startup, deficit).</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.DataFrames.add_cost_to_dataframe">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.DataFrames.</span></span><span class="sig-name descname"><span class="pre">add_cost_to_dataframe</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">df</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">DataFrame</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">DataFrame</span></span></span></dt>
<dd><p>Append cost components, demand/deficit, total generation,
and marginal cost (CMO) to the DataFrame.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>df</strong> (<em>pd.DataFrame</em>) – The DataFrame to which cost components will be appended.</p></li>
<li><p><strong>model</strong> (<em>ConcreteModel</em>) – A Pyomo model instance with thermal, hydro, and balance constraints.</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated DataFrame including cost components, energy balance data,
and marginal cost of operation (CMO).</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pd.DataFrame</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.DataFrames.add_hydro_dispatch_to_dataframe">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.DataFrames.</span></span><span class="sig-name descname"><span class="pre">add_hydro_dispatch_to_dataframe</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">df</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">DataFrame</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">DataFrame</span></span></span></dt>
<dd><p>Append hydropower dispatch results to a pandas DataFrame.</p>
<p>This function extracts the turbined flow, storage volume, hydropower
generation, and spillage from a Pyomo model and appends them to the
given DataFrame, one column per unit and variable.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>df</strong> (<em>pd.DataFrame</em>) – The DataFrame to which the results will be appended. It may be empty.</p></li>
<li><p><strong>model</strong> (<em>ConcreteModel</em>) – A Pyomo model instance containing hydropower variables.</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated DataFrame including hydropower dispatch results.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pd.DataFrame</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.DataFrames.add_thermal_dispatch_to_dataframe">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.DataFrames.</span></span><span class="sig-name descname"><span class="pre">add_thermal_dispatch_to_dataframe</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">df</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">DataFrame</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">DataFrame</span></span></span></dt>
<dd><p>Append thermal dispatch results to a pandas DataFrame.</p>
<p>This function extracts generation, commitment (on/off), startup, shutdown,
and reserve values from the Pyomo model and appends them to the given
DataFrame. Optional variables such as reserve (<cite>r</cite>), startup (<cite>y</cite>), and
shutdown (<cite>w</cite>) are included if present.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>df</strong> (<em>pd.DataFrame</em>) – The DataFrame to which the results will be appended. It may be empty.</p></li>
<li><p><strong>model</strong> (<em>ConcreteModel</em>) – A Pyomo model instance containing thermal generation variables.</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated DataFrame including thermal dispatch results.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pd.DataFrame</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.DataFrames.build_dispatch_dataframe">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.DataFrames.</span></span><span class="sig-name descname"><span class="pre">build_dispatch_dataframe</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">DataFrame</span></span></span></dt>
<dd><p>Build a full dispatch DataFrame with generation, cost, and balance data.</p>
<p>This function aggregates the dispatch results from all subsystems
(hydropower, thermal, renewable, storage) along with cost components
into a single structured pandas DataFrame.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>model</strong> (<em>ConcreteModel</em>) – A Pyomo model instance containing subsystem variables and time horizon.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A DataFrame with all relevant dispatch results and economic metrics.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pd.DataFrame</p>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.Formatters">
<span id="naivepydecomp-formatters-module"></span><h2>NaivePyDECOMP.Formatters module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Utility: Format Numbers in Brazilian Currency Style</p>
<section id="id9">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id10">
<h3>Description</h3>
<p>This module provides a helper function to format numerical values in the
Brazilian currency style: periods as thousand separators and commas for
decimals (e.g., 1234567.89 → ‘1.234.567,89’).</p>
<p>It is intended for producing human-readable cost reports or summaries in
energy dispatch problems solved by NaivePyDECOMP.</p>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">format_brl</span><span class="p">(</span><span class="mf">1234567.89</span><span class="p">)</span>
<span class="go">&#39;1.234.567,89&#39;</span>
</pre></div>
</div>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">format_brl</span><span class="p">(</span><span class="mf">42.5</span><span class="p">)</span>
<span class="go">&#39;42,50&#39;</span>
</pre></div>
</div>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
</section>
<section id="module-NaivePyDECOMP.ModelCheck">
<span id="naivepydecomp-modelcheck-module"></span><h2>NaivePyDECOMP.ModelCheck module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Module: Model Component Validators</p>
<section id="id11">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id12">
<h3>Description</h3>
<p>This module provides a set of utility functions to verify whether a given Pyomo
<cite>ConcreteModel</cite> contains the essential variables, parameters, and sets required
for each subsystem in an energy dispatch problem.</p>
<p>The validation is modular and lightweight, designed to support the dynamic
assembly of hybrid dispatch models comprising:
- Hydropower units
- Thermal generation units
- Renewable generation sources
- Energy storage systems</p>
<p>These functions are typically used to determine the feasibility of operations
such as cost extraction, result formatting, or diagnostics on a per-subsystem basis.</p>
</section>
<section id="functions">
<h3>Functions</h3>
<ul class="simple">
<li><p>has_hydro_model(model): Checks presence of hydropower-related variables.</p></li>
<li><p>has_thermal_model(model): Checks presence of thermal generation variables.</p></li>
<li><p>has_renewable_model(model): Checks presence of renewable generation variables.</p></li>
<li><p>has_storage_model(model): Checks presence of storage system variables.</p></li>
</ul>
</section>
<section id="usage-example">
<h3>Usage Example</h3>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">if</span> <span class="n">has_thermal_model</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
<span class="gp">&gt;&gt;&gt; </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Thermal model components detected.&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ModelCheck.has_thermal_model">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ModelCheck.</span></span><span class="sig-name descname"><span class="pre">has_thermal_model</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">bool</span></span></span></dt>
<dd><p>Check whether the given Pyomo model contains all components of a thermal subsystem.</p>
<p>This function validates the existence of typical thermal dispatch variables,
including generation, commitment status, and startup/shutdown indicators.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>model</strong> (<em>ConcreteModel</em>) – The Pyomo model instance to be validated.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>True if all required thermal components are present, False otherwise.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>bool</p>
</dd>
</dl>
<p class="rubric">Notes</p>
<p>The required attributes are:
- T             : Time periods.
- TG            : Set of thermal units.
- thermal_p     : Power generation variable.
- thermal_Cost    : Cost parameter.</p>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.ModelFormatters">
<span id="naivepydecomp-modelformatters-module"></span><h2>NaivePyDECOMP.ModelFormatters module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Utility: Welcome Message and Model Summary Printer</p>
<section id="id13">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id14">
<h3>Description</h3>
<p>This utility provides formatted, color-enhanced terminal output using the
<cite>colorama</cite> library to display a welcome banner, solver configuration,
and model characteristics. It is intended to improve the user experience
by offering clear diagnostics and summaries prior to model solving.</p>
<p>Features include:
- Welcome banner with project and author information.
- Display of solver name and strategy.
- Pretty-printed summary of subsystems included in the dispatch problem.
- Parameter visualization for hydraulic, thermal, renewable, and storage units.</p>
<p>Use this module as part of the pre-solve interface of NaivePyDECOMP to
provide clarity and visual feedback about the simulation setup.</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ModelFormatters.format_hydro_model">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ModelFormatters.</span></span><span class="sig-name descname"><span class="pre">format_hydro_model</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">case</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print formatted information for each hydropower unit.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>case</strong> (<em>dict</em>) – Dictionary containing ‘hydro’ section with unit definitions.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ModelFormatters.format_models">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ModelFormatters.</span></span><span class="sig-name descname"><span class="pre">format_models</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">case</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Dispatch model formatting routines to subsystem-specific formatters.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>case</strong> (<em>dict</em>) – Input data dictionary containing unit-level information.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ModelFormatters.format_thermal_model">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ModelFormatters.</span></span><span class="sig-name descname"><span class="pre">format_thermal_model</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">case</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print formatted information for each thermal generation unit.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>case</strong> (<em>dict</em>) – Dictionary containing ‘thermal’ section with unit definitions.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ModelFormatters.model_properties">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ModelFormatters.</span></span><span class="sig-name descname"><span class="pre">model_properties</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">case</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print a concise list of subsystems included in the case (hydro, thermal, etc.).</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>case</strong> (<em>dict</em>) – Parsed input configuration containing subsystem definitions.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ModelFormatters.print_welcome_banner">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ModelFormatters.</span></span><span class="sig-name descname"><span class="pre">print_welcome_banner</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Print a formatted welcome banner with project information and author credit.</p>
<p>Uses colored and bold text to enhance readability in the terminal.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ModelFormatters.print_welcome_message">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ModelFormatters.</span></span><span class="sig-name descname"><span class="pre">print_welcome_message</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">case</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Display the full welcome message and solver configuration.</p>
<p>This includes the banner, solver details, and an overview of
the model components based on the input dictionary.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>model</strong> (<em>ConcreteModel</em>) – The Pyomo model instance.</p></li>
<li><p><strong>case</strong> (<em>dict</em>) – Configuration dictionary loaded from YAML or JSON input.</p></li>
</ul>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.PlotSeries">
<span id="naivepydecomp-plotseries-module"></span><h2>NaivePyDECOMP.PlotSeries module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Plotting Utilities for Time Series in Power System Studies</p>
<section id="id15">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id16">
<h3>Description</h3>
<p>This module provides high-level plotting routines to visualize time-indexed
variables commonly encountered in short-term operation and planning studies
of hydrothermal systems. It offers both line plots and bar plots, supporting
grouped or stacked styles.</p>
</section>
<section id="id17">
<h3>Functions</h3>
<dl class="simple">
<dt>plot_series(t, series_dict, title, ylabel, file)</dt><dd><p>Plot one or more time series as line graphs, with LaTeX-compatible labels.</p>
</dd>
<dt>plot_series_bar(t, series_dict, title, ylabel, file, stacked=False, width=0.85)</dt><dd><p>Plot multiple time series as bar charts, either grouped or stacked, with
configurable bar width.</p>
</dd>
</dl>
</section>
<section id="conventions">
<h3>Conventions</h3>
<ul class="simple">
<li><p>The time axis is discrete, typically representing hourly stages
(e.g., t = 1, …, 24).</p></li>
<li><p>Input series must be aligned with the time axis.</p></li>
<li><p>Labels provided in series_dict are rendered in math mode
to enable LaTeX-style notation in figures.</p></li>
<li><p>Output files are saved with 600 dpi resolution and tight bounding boxes.</p></li>
</ul>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>Figures are generated using Matplotlib and saved to the given file path
(PNG, PDF, or other supported formats).</p></li>
<li><p>The functions are designed for clarity in academic and technical reports,
especially when documenting hydrothermal dispatch and unit-commitment results.</p></li>
<li><p>Grid lines, legends, and axis labels are automatically formatted for
readability.</p></li>
</ul>
<p class="rubric">Examples</p>
<p>Render a simple time series plot:</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">t</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;U_</span><span class="si">{1}</span><span class="s2">&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">140</span><span class="p">],</span> <span class="s2">&quot;U_</span><span class="si">{2}</span><span class="s2">&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">90</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">150</span><span class="p">]}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">plot_series</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&quot;Hydropower Generation&quot;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s2">&quot;MW&quot;</span><span class="p">,</span>
<span class="gp">... </span>            <span class="n">file</span><span class="o">=</span><span class="s2">&quot;generation.png&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>Render a stacked bar plot:</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;Hydro&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">200</span><span class="p">,</span> <span class="mi">220</span><span class="p">,</span> <span class="mi">210</span><span class="p">],</span> <span class="s2">&quot;Thermal&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">300</span><span class="p">,</span> <span class="mi">280</span><span class="p">,</span> <span class="mi">290</span><span class="p">]}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">t</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">plot_series_bar</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s2">&quot;Generation Mix&quot;</span><span class="p">,</span> <span class="n">ylabel</span><span class="o">=</span><span class="s2">&quot;MW&quot;</span><span class="p">,</span>
<span class="gp">... </span>                <span class="n">file</span><span class="o">=</span><span class="s2">&quot;mix.png&quot;</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</pre></div>
</div>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
</section>
<section id="module-NaivePyDECOMP.PDDDMergeModels">
<span id="naivepydecomp-pdddmergemodels-module"></span><h2>NaivePyDECOMP.PDDDMergeModels module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Utility: PDDD Synthetic Model Generator</p>
<section id="id18">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id19">
<h3>Description</h3>
<p>This utility provides tools to reconstruct a deterministic representation
of a multistage dual dynamic programming (PDDD) solution as a static Pyomo
model. It enables post-optimization analysis by aggregating decision
variables, dual prices, volumes, and cost structures from multiple stages
into a single structured object.</p>
</section>
<section id="main-functionality">
<h3>Main Functionality</h3>
<p>The primary function exposed by this package is:</p>
<ul class="simple">
<li><p><cite>generate_dummy_model(pddd_solution, yaml_data)</cite>: Constructs a
fully populated <cite>ConcreteModel</cite> that mirrors the original optimization
trajectory. It fixes all relevant decision variables and duals for each
unit (hydro, thermal, renewable, storage), and reassembles cost
expressions for reporting, visualization, and interpretation.</p></li>
</ul>
</section>
<section id="intended-use">
<h3>Intended Use</h3>
<p>This package is not designed to perform optimization itself. Instead, it
serves as a post-processing tool for exporting or inspecting results from
a PDDD optimization workflow — for example, to be used in scenario analysis,
LaTeX export, sensitivity evaluation, or policy verification.</p>
</section>
<section id="dependencies">
<h3>Dependencies</h3>
<ul class="simple">
<li><p>Pyomo</p></li>
<li><p>A compatible solver (e.g., GLPK, CPLEX, IPOPT)</p></li>
<li><p>Auxiliary model-building functions such as:
- <cite>add_hydraulic_cost_expression</cite>
- <cite>add_thermal_cost_expression</cite>
- <cite>add_storage_cost_expression</cite>
- <cite>add_renewable_cost_expression</cite></p></li>
</ul>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span><span class="w"> </span><span class="nn">naivepydecomp.pddd</span><span class="w"> </span><span class="kn">import</span> <span class="n">generate_dummy_model</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">model</span> <span class="o">=</span> <span class="n">generate_dummy_model</span><span class="p">(</span><span class="n">pddd_solution</span><span class="p">,</span> <span class="n">yaml_data</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">value</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">OBJ</span><span class="p">))</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<dl class="simple">
<dt><code class="xref py py-obj docutils literal notranslate"><span class="pre">solve_pddd</span></code></dt><dd><p>The iterative algorithm that produces the input data for <cite>generate_dummy_model</cite>.</p>
</dd>
<dt><code class="xref py py-obj docutils literal notranslate"><span class="pre">solve_stage_pddd</span></code></dt><dd><p>Solves a single stage of the PDDD problem and stores intermediate results.</p>
</dd>
</dl>
</div>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.PDDDMergeModels.generate_dummy_model">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.PDDDMergeModels.</span></span><span class="sig-name descname"><span class="pre">generate_dummy_model</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pddd_solution</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></em>, <em class="sig-param"><span class="n"><span class="pre">yaml_data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd><p>Generates a synthetic Pyomo model representing the structure and results
of a full PDDD (Deterministic Dual Dynamic Programming) optimization process.</p>
<p>This function aggregates relevant decision variables and dual information
across all stages and stores them as fixed model components. It is useful
for analyzing and exporting the solution in a structured and interpretable
Pyomo <cite>ConcreteModel</cite>, without performing any further optimization.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>pddd_solution</strong> (<em>List</em>) – List containing the results of each stage of the PDDD algorithm,
including model objects, decision variables, shadow prices, volumes,
and costs for each time stage.</p></li>
<li><p><strong>yaml_data</strong> (<em>dict</em>) – Dictionary parsed from the YAML configuration file, containing system
metadata, unit definitions (hydro, thermal, renewable, storage), cost
parameters, and other structural data used during model construction.</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p><strong>model</strong> – A fully populated Pyomo <cite>ConcreteModel</cite> object that encapsulates:
- Fixed decision variables from hydro, thermal, renewable, and storage units.
- Cost terms and expressions used in the original optimization.
- Final values of market price (CMO), deficit penalty, and alpha values.
- Sets for all units and time stages.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>The returned model is not intended to be solved again, but rather to
serve as a reference for results visualization, report generation, or
post-analysis.</p></li>
<li><p>The cost components are reassembled using the same structure as in the
original model, using the <cite>add_*_cost_expression</cite> helper functions.</p></li>
<li><p>The model object stores one time step ahead (nstages + 1) for correct
alignment with stage-based formulations.</p></li>
</ul>
<dl class="field-list simple">
<dt class="field-odd">Raises<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>KeyError</strong> – If expected keys or values are missing from <cite>pddd_solution</cite> or <cite>yaml_data</cite>.</p>
</dd>
</dl>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<dl class="simple">
<dt><code class="xref py py-obj docutils literal notranslate"><span class="pre">solve_pddd</span></code></dt><dd><p>Function that produces the input <cite>pddd_solution</cite> dictionary.</p>
</dd>
</dl>
</div>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.Reporting">
<span id="naivepydecomp-reporting-module"></span><h2>NaivePyDECOMP.Reporting module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Utility: Post-Solve Dispatch Summary and Cost Reports</p>
<section id="id20">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id21">
<h3>Description</h3>
<p>This module contains functions to summarize dispatch results after solving
a Pyomo-based optimization problem. It prints total generation, cost breakdowns,
and unit-level summaries for hydropower, thermal, renewable, and storage technologies.</p>
<p>Features:
- Total cost, demand, deficit and thermal cost components.
- Per-unit dispatch summaries with color-enhanced output (via <cite>colorama</cite>).
- Compatible with modular NaivePyDECOMP subsystem architecture.</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Reporting.dispatch_summary">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Reporting.</span></span><span class="sig-name descname"><span class="pre">dispatch_summary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print a complete dispatch and cost summary including:
- Total generation and demand.
- Deficit and its monetary cost.
- Thermal cost breakdown (start-up, generation).
- Overall total cost from the model objective.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>model</strong> (<em>ConcreteModel</em>) – Solved Pyomo model instance.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Reporting.hydro_dispatch_summary">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Reporting.</span></span><span class="sig-name descname"><span class="pre">hydro_dispatch_summary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print unit-level hydropower generation summary in MWmed.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>model</strong> (<em>ConcreteModel</em>) – Solved Pyomo model with hydropower subsystem.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Reporting.renewable_dispatch_summary">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Reporting.</span></span><span class="sig-name descname"><span class="pre">renewable_dispatch_summary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print unit-level renewable generation summary in MWmed.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>model</strong> (<em>ConcreteModel</em>) – Solved Pyomo model with renewable subsystem.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Reporting.storage_dispatch_summary">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Reporting.</span></span><span class="sig-name descname"><span class="pre">storage_dispatch_summary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print unit-level storage discharge summary in MWmed.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>model</strong> (<em>ConcreteModel</em>) – Solved Pyomo model with storage subsystem.</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Reporting.thermal_dispatch_summary">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Reporting.</span></span><span class="sig-name descname"><span class="pre">thermal_dispatch_summary</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">model</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">None</span></span></span></dt>
<dd><p>Print unit-level thermal generation summary in MWmed.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>model</strong> (<em>ConcreteModel</em>) – Solved Pyomo model with thermal subsystem.</p>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.SolverPDDD">
<span id="naivepydecomp-solverpddd-module"></span><h2>NaivePyDECOMP.SolverPDDD module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Utility: Solve PDDD Pyomo Models from YAML Configuration</p>
<section id="id22">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id23">
<h3>Description</h3>
<p>This utility builds and solves a Pyomo optimization model using input
data provided in a YAML or JSON configuration file. The solver is selected
based on metadata, and can include support for decomposition strategies
(e.g., MIN-DT via MindtPy).</p>
<p>Features:
- Automatic model construction via modular subsystems (thermal, hydro, storage, renewable).
- Solver selection and configuration via YAML metadata.
- Support for MINLP solvers such as MindtPy with strategy and time limits.
- Termination condition validation to ensure feasibility or optimality.</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.SolverPDDD.compute_fcf">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.SolverPDDD.</span></span><span class="sig-name descname"><span class="pre">compute_fcf</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cuts</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Dict</span><span class="p"><span class="pre">]</span></span></span></em>, <em class="sig-param"><span class="n"><span class="pre">pddd_memory</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Dict</span><span class="p"><span class="pre">]</span></span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">Dict</span></span></span></dt>
<dd><p>Compute the Future Cost Function (FCF) values for all stages
in the PDDD framework, given a set of Benders cuts.</p>
<p>This function iterates over the memory of the PDDD algorithm,
extracting the storage volumes for each stage and evaluating
the corresponding FCF approximation using the provided cuts.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>cuts</strong> (<em>List</em><em>[</em><em>Dict</em><em>]</em>) – <p>List of Benders cuts. Each cut must be a dictionary with:
{</p>
<blockquote>
<div><p>”rhs”: float,                # adjusted intercept
“coefs”: {unit: float}       # coefficients (subgradients)</p>
</div></blockquote>
<p>}</p>
</p></li>
<li><p><strong>pddd_memory</strong> (<em>List</em><em>[</em><em>Dict</em><em>]</em>) – <p>List of stage-level information from the PDDD algorithm.
Each element must include the storage volumes in the key
‘f_volume’, e.g.:
{</p>
<blockquote>
<div><p>”f_volume”: {“UHE1”: 50, “UHE2”: 80, …}</p>
</div></blockquote>
<p>}</p>
</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p><p>Dictionary of FCF values for each stage, with keys in the
format “FCF_{t}” where t denotes the stage index (1-based).
Example:
{</p>
<blockquote>
<div><p>”FCF_1”: […],
“FCF_2”: […],
…</p>
</div></blockquote>
<p>}</p>
</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>Dict</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.SolverPDDD.fcf_from_cuts">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.SolverPDDD.</span></span><span class="sig-name descname"><span class="pre">fcf_from_cuts</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">cuts</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Dict</span><span class="p"><span class="pre">]</span></span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stage</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">storage_levels</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">List</span></span></span></dt>
<dd><p>Compute the Future Cost Function (FCF) value given a set of Benders cuts,
assuming that the expansion point (xk) has already been absorbed into
the intercept (rhs).</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>cuts</strong> (<em>list</em><em> of </em><em>dict</em>) – <p>List of cuts. Each cut must have the format:
{</p>
<blockquote>
<div><p>”stage”: int                 # stage for calculation
“rhs”: float,                # adjusted intercept
“coefs”: {unit: float}       # coefficients (subgradients)</p>
</div></blockquote>
<p>}</p>
</p></li>
<li><p><strong>stage</strong> (<em>int</em>) – The index of the current stage being solved (0-based).</p></li>
<li><p><strong>storage_levels</strong> (<em>dict</em>) – Dictionary with current storage volumes for each hydro unit.
Example: {“UHE1”: 50, “UHE2”: 80}</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>Value of the Future Cost Function (FCF) evaluated at the given
storage levels.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>List[float]</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.SolverPDDD.solve_pddd">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.SolverPDDD.</span></span><span class="sig-name descname"><span class="pre">solve_pddd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">str</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">max_iter</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">500</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">tol</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">float</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">0.01</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">verbose</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">bool</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">Tuple</span><span class="p"><span class="pre">[</span></span><span class="pre">ConcreteModel</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">Dict</span><span class="p"><span class="pre">]</span></span></span></span></dt>
<dd><p>Solves the full multi-stage hydrothermal dispatch problem using the
Deterministic Dual Dynamic Programming (PDDD) algorithm.</p>
<p>This function implements both the forward and backward passes of the
PDDD approach, coordinating the stage-wise resolution of subproblems,
the propagation of terminal volumes between stages, and the generation
of Benders-like cuts. The process continues until the upper-lower bound
convergence criterion is satisfied or the maximum number of iterations
is reached.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>path</strong> (<em>str</em>) – Path to the YAML file containing the problem configuration
(system data, hydro parameters, solver options).</p></li>
<li><p><strong>max_iter</strong> (<em>int</em><em>, </em><em>optional</em>) – Maximum number of forward-backward iterations allowed (default is 10).</p></li>
<li><p><strong>tol</strong> (<em>float</em><em>, </em><em>optional</em>) – Convergence tolerance between ZSUP and ZINF values used as stopping
criterion (default is 1e-2).</p></li>
<li><p><strong>verbose</strong> (<em>bool</em><em>, </em><em>optional</em>) – Whether to print iteration logs and convergence progress (default is True).</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p><ul class="simple">
<li><p><strong>model</strong> (<em>ConcreteModel</em>) – A dummy Pyomo model representing the structure and solution of the
final iteration. This is mainly for completeness and introspection.</p></li>
<li><p><strong>case</strong> (<em>dict</em>) – The parsed YAML case dictionary used in the PDDD process, containing
metadata, hydro data, and solver configurations.</p></li>
<li><p><strong>alpha_values</strong> (<em>dict</em>) – alpha values of future costs.</p></li>
<li><p><strong>ZINF</strong> (<em>dict</em>)</p></li>
</ul>
</p>
</dd>
<dt class="field-odd">Raises<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>RuntimeError</strong> – If the specified solver is not available or any stage optimization fails.</p></li>
<li><p><strong>ValueError</strong> – If no hydro data is provided in the YAML configuration.</p></li>
</ul>
</dd>
</dl>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>The upper bound (ZSUP) is computed cumulatively from all stages,
discounting the cost-to-go alpha values.</p></li>
<li><p>The lower bound (ZINF) corresponds to the cost of the first stage
assuming a myopic (executable) policy.</p></li>
<li><p>Cuts are generated in the backward pass and injected into earlier stages
to approximate the value function of future stages.</p></li>
<li><p>This implementation is pedagogical and emphasizes clarity and modularity
over computational performance.</p></li>
</ul>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.SolverPDDD.solve_stage_pddd">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.SolverPDDD.</span></span><span class="sig-name descname"><span class="pre">solve_stage_pddd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">yaml_data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stage_hydros</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stage_storage</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cuts</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">stage</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">Dict</span></span></span></dt>
<dd><p>Solves a single stage of the hydrothermal dispatch problem within the
Deterministic Dual Dynamic Programming (PDDD) framework.</p>
<p>This function constructs and solves the optimization model for a given stage,
incorporating the current state of hydro units, operational cuts from future stages,
and the parameters defined in the YAML configuration. It returns the resulting
model and relevant economic and operational variables.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>yaml_data</strong> (<em>dict</em>) – The full configuration dictionary loaded from a YAML file, containing
system metadata, solver settings, and model parameters.</p></li>
<li><p><strong>stage_hydros</strong> (<em>dict</em>) – Dictionary describing the state of the hydro units at the current stage,
including initial volumes, inflows, and other relevant characteristics.</p></li>
<li><p><strong>stage_storage</strong> (<em>dict</em>) – Dictionary describing the state of the storage units at the current stage,
including initial energy, energy limits and other relevant characteristics.</p></li>
<li><p><strong>cuts</strong> (<em>dict</em>) – Dictionary containing Benders-like cuts (affine inequalities) propagated
from future stages, used to approximate the future cost function.</p></li>
<li><p><strong>stage</strong> (<em>int</em>) – The index of the current stage being solved (0-based).</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p><p><strong>results</strong> – Dictionary containing:</p>
<ul class="simple">
<li><dl class="simple">
<dt>’model’<span class="classifier">ConcreteModel</span></dt><dd><p>The Pyomo model instance with solved values.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>’hydro’<span class="classifier">dict</span></dt><dd><p>The hydro dictionary passed as input, preserved for traceability.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>’storage’<span class="classifier">dict</span></dt><dd><p>The storage dictionary passed as input, preserved for traceability.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>’total_cost’<span class="classifier">float</span></dt><dd><p>The stage cost including the estimated future cost via alpha.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>’alpha’<span class="classifier">float</span></dt><dd><p>The value of the cost-to-go (future cost approximation) variable.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>’f_volume’<span class="classifier">dict</span></dt><dd><p>Dictionary mapping each hydro plant to its final volume at the end of the stage.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>’cmo’<span class="classifier">float</span></dt><dd><p>The dual variable associated with the system-wide energy balance constraint (marginal cost of operation).</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>’cma’<span class="classifier">dict</span></dt><dd><p>Dictionary mapping each hydro plant to its marginal water value
(dual variable of the volume balance constraint).</p>
</dd>
</dl>
</li>
</ul>
</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>dict</p>
</dd>
<dt class="field-even">Raises<span class="colon">:</span></dt>
<dd class="field-even"><p><strong>RuntimeError</strong> – If the specified solver is not available or if the optimization does not reach
    an optimal or feasible termination condition.</p>
</dd>
</dl>
<p class="rubric">Notes</p>
<p>This function is used internally in the forward and backward passes of the PDDD algorithm
to simulate stage-wise operations and propagate information backward via cuts.</p>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.Solver">
<span id="naivepydecomp-solver-module"></span><h2>NaivePyDECOMP.Solver module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Utility: Solve Pyomo Model from YAML Configuration</p>
<section id="id24">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id25">
<h3>Description</h3>
<p>This utility builds and solves a Pyomo optimization model using input
data provided in a YAML or JSON configuration file. The solver is selected
based on metadata, and can include support for decomposition strategies
(e.g., MIN-DT via MindtPy).</p>
<p>Features:
- Automatic model construction via modular subsystems (thermal, hydro, storage, renewable).
- Solver selection and configuration via YAML metadata.
- Support for MINLP solvers such as MindtPy with strategy and time limits.
- Termination condition validation to ensure feasibility or optimality.</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.Solver.solve">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.Solver.</span></span><span class="sig-name descname"><span class="pre">solve</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">path</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">str</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">Tuple</span><span class="p"><span class="pre">[</span></span><span class="pre">ConcreteModel</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">Dict</span><span class="p"><span class="pre">]</span></span></span></span></dt>
<dd><p>Build and solve a Pyomo optimization model from a configuration file.</p>
<p>This function loads a model and its configuration from a structured YAML or JSON
file using the <cite>build_model_from_file</cite> routine. It then selects the appropriate
solver based on the ‘meta’ section, applies any solver-specific options (including
for MIN-DT decomposition), and executes the optimization.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>path</strong> (<em>str</em>) – Path to the configuration file containing model metadata and data sections.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p><ul class="simple">
<li><p><strong>model</strong> (<em>ConcreteModel</em>) – The Pyomo model after the solve routine, with variables populated.</p></li>
<li><p><strong>case</strong> (<em>dict</em>) – Parsed dictionary containing the original configuration, metadata,
solver options, and problem data.</p></li>
</ul>
</p>
</dd>
<dt class="field-odd">Raises<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>RuntimeError</strong> – If the solver is not available, solve fails, or model is infeasible.</p>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.Utils">
<span id="naivepydecomp-utils-module"></span><h2>NaivePyDECOMP.Utils module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>LaTeX Table Utilities for Pandas DataFrames</p>
<section id="id26">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id27">
<h3>Description</h3>
<p>This module provides helpers to render pandas DataFrames as LaTeX tables with
custom styling aimed at scientific and engineering reports. It includes:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">binary_df_to_colored_latex</span></code>: Renders a binary matrix (0/1) as a colored
LaTeX table, highlighting ones and zeros with configurable colors and
producing a complete <code class="docutils literal notranslate"><span class="pre">table</span></code> environment.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">custom_df_to_latex</span></code>: Renders a generic (non-binary) DataFrame as a LaTeX
table with bold headers (and bold math within headers), using <code class="docutils literal notranslate"><span class="pre">booktabs</span></code>
rules and producing a complete <code class="docutils literal notranslate"><span class="pre">table</span></code> environment.</p></li>
</ul>
<p>Both functions omit the DataFrame index from the LaTeX output by design,
emitting only the column headers and data cells.</p>
</section>
<section id="id28">
<h3>Functions</h3>
<dl class="simple">
<dt>binary_df_to_colored_latex</dt><dd><p>Render a binary (0/1) DataFrame as a colored LaTeX table. Cells equal to 1
are filled with <code class="docutils literal notranslate"><span class="pre">one_color</span></code>; cells equal to 0 use <code class="docutils literal notranslate"><span class="pre">zero_color</span></code>.
Non-binary values, if present, are formatted with <code class="docutils literal notranslate"><span class="pre">floatfmt</span></code> and not
color-filled. The index is not included in the output.</p>
</dd>
<dt>custom_df_to_latex</dt><dd><p>Render a generic DataFrame as a LaTeX table using <code class="docutils literal notranslate"><span class="pre">booktabs</span></code> rules with a
bold header row. Inline math fragments in header cells  are additionally set
in bold math using <code class="docutils literal notranslate"><span class="pre">bold_math_cmd</span></code>.
The index is not included in the output.</p>
</dd>
</dl>
</section>
<section id="parameters-shared">
<h3>Parameters (Shared)</h3>
<dl class="simple">
<dt>df<span class="classifier">pandas.DataFrame</span></dt><dd><p>The input table to render. Only the DataFrame <strong>columns</strong> are emitted;
the index is always omitted from the LaTeX output.</p>
</dd>
<dt>caption<span class="classifier">str, optional</span></dt><dd><p>Caption text for the LaTeX <code class="docutils literal notranslate"><span class="pre">table</span></code> environment.</p>
</dd>
<dt>label<span class="classifier">str, optional</span></dt><dd><p>Label for cross-referencing with <code class="docutils literal notranslate"><span class="pre">\ref{...}</span></code>.</p>
</dd>
<dt>column_format<span class="classifier">str or None, optional</span></dt><dd><p>Column specification for the LaTeX <code class="docutils literal notranslate"><span class="pre">tabular</span></code> environment. If <code class="docutils literal notranslate"><span class="pre">None</span></code>,
a default is inferred based on the number of columns (all centered).</p>
</dd>
<dt>size_cmd<span class="classifier">str, optional</span></dt><dd><p>LaTeX size command applied inside the table (e.g., <code class="docutils literal notranslate"><span class="pre">\small</span></code>, <code class="docutils literal notranslate"><span class="pre">\scriptsize</span></code>).</p>
</dd>
</dl>
</section>
<section id="additional-parameters">
<h3>Additional Parameters</h3>
<dl class="simple">
<dt>one_color<span class="classifier">str, optional</span></dt><dd><p>(For <code class="docutils literal notranslate"><span class="pre">binary_df_to_colored_latex</span></code>) LaTeX color name for cells with value 1.</p>
</dd>
<dt>zero_color<span class="classifier">str, optional</span></dt><dd><p>(For <code class="docutils literal notranslate"><span class="pre">binary_df_to_colored_latex</span></code>) LaTeX background color name for cells
with value 0.</p>
</dd>
<dt>floatfmt<span class="classifier">str, optional</span></dt><dd><p>(For <code class="docutils literal notranslate"><span class="pre">binary_df_to_colored_latex</span></code>) Format string for numeric entries that
are not 0/1 (e.g., <code class="docutils literal notranslate"><span class="pre">&quot;{:d}&quot;</span></code> or <code class="docutils literal notranslate"><span class="pre">&quot;{:.0f}&quot;</span></code>).</p>
</dd>
<dt>bold_math_cmd<span class="classifier">str, optional</span></dt><dd><p>(For <code class="docutils literal notranslate"><span class="pre">custom_df_to_latex</span></code>) Command for bolding inline math in header cells,
e.g., <code class="docutils literal notranslate"><span class="pre">\mathbf</span></code>, <code class="docutils literal notranslate"><span class="pre">\boldsymbol</span></code>, or <code class="docutils literal notranslate"><span class="pre">\bm</span></code>. Ensure the corresponding
LaTeX package is loaded.</p>
</dd>
</dl>
<dl class="field-list simple">
<dt class="field-odd">returns<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><em>str</em> – A complete LaTeX <code class="docutils literal notranslate"><span class="pre">table</span></code> environment (including an inner <code class="docutils literal notranslate"><span class="pre">tabular</span></code> and
a <code class="docutils literal notranslate"><span class="pre">\resizebox{\textwidth}{!}{...}</span></code> wrapper) ready to paste into a
LaTeX document.</p></li>
<li><p><em>Requirements</em></p></li>
<li><p><em>————</em></p></li>
<li><p><strong>- Python packages</strong> (<code class="docutils literal notranslate"><span class="pre">pandas</span></code>, <code class="docutils literal notranslate"><span class="pre">numpy</span></code>, <code class="docutils literal notranslate"><span class="pre">re</span></code> (standard library).)</p></li>
<li><p><em>- LaTeX packages</em> –</p>
<ul>
<li><p>For both functions: <code class="docutils literal notranslate"><span class="pre">graphicx</span></code> (for <code class="docutils literal notranslate"><span class="pre">\resizebox</span></code>), <code class="docutils literal notranslate"><span class="pre">booktabs</span></code> (for <code class="docutils literal notranslate"><span class="pre">custom_df_to_latex</span></code>).</p></li>
<li><p>For coloring: <code class="docutils literal notranslate"><span class="pre">xcolor</span></code> with the <code class="docutils literal notranslate"><span class="pre">table</span></code> option (provides <code class="docutils literal notranslate"><span class="pre">\cellcolor</span></code>).
Colors such as <code class="docutils literal notranslate"><span class="pre">oncell</span></code> and <code class="docutils literal notranslate"><span class="pre">white</span></code> must be defined in the preamble.</p></li>
<li><p>For bold math: <code class="docutils literal notranslate"><span class="pre">amsmath</span></code>, <code class="docutils literal notranslate"><span class="pre">bm</span></code>, or any package compatible with <code class="docutils literal notranslate"><span class="pre">bold_math_cmd</span></code>.</p></li>
</ul>
</li>
</ul>
</dd>
</dl>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>Both functions assume the DataFrame columns represent displayable headers.
If numeric, they are commonly used as time periods. Pre-formatting is advised.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">binary_df_to_colored_latex</span></code> coerces values to integers for coloring.
Non-binary values are rendered using <code class="docutils literal notranslate"><span class="pre">floatfmt</span></code> but receive no coloring.</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">custom_df_to_latex</span></code> skips escaping in data cells, assuming LaTeX-safe input.</p></li>
</ul>
<p class="rubric">Examples</p>
<p>Render a binary status matrix with colored cells:</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span><span class="w"> </span><span class="nn">pandas</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nn">pd</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tex</span> <span class="o">=</span> <span class="n">binary_df_to_colored_latex</span><span class="p">(</span>
<span class="gp">... </span>    <span class="n">df</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">caption</span><span class="o">=</span><span class="s2">&quot;Hourly U, Y, and W variables&quot;</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">label</span><span class="o">=</span><span class="s2">&quot;tab:uyw&quot;</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">one_color</span><span class="o">=</span><span class="s2">&quot;oncell&quot;</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">zero_color</span><span class="o">=</span><span class="s2">&quot;white&quot;</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">floatfmt</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">{:d}</span><span class="s2">&quot;</span>
<span class="gp">... </span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">tex</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
<span class="go">\begin{table}[!ht]</span>
</pre></div>
</div>
<p>Render a numeric table with bold headers and math-aware bolding:</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
<span class="gp">... </span>    <span class="p">[[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">],</span> <span class="p">[</span><span class="mf">3.5</span><span class="p">,</span> <span class="mf">4.25</span><span class="p">]],</span>
<span class="gp">... </span>    <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sa">r</span><span class="s2">&quot;$t=1$&quot;</span><span class="p">,</span> <span class="sa">r</span><span class="s2">&quot;\(t=2\)&quot;</span><span class="p">]</span>
<span class="gp">... </span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tex2</span> <span class="o">=</span> <span class="n">custom_df_to_latex</span><span class="p">(</span>
<span class="gp">... </span>    <span class="n">df2</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">caption</span><span class="o">=</span><span class="s2">&quot;Example Table&quot;</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">label</span><span class="o">=</span><span class="s2">&quot;tab:example&quot;</span><span class="p">,</span>
<span class="gp">... </span>    <span class="n">bold_math_cmd</span><span class="o">=</span><span class="s2">&quot;\mathbf&quot;</span>
<span class="gp">... </span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s2">&quot;</span><span class="se">\t</span><span class="s2">oprule&quot;</span> <span class="ow">in</span> <span class="n">tex2</span>
<span class="go">True</span>
</pre></div>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<dl class="simple">
<dt><code class="xref py py-obj docutils literal notranslate"><span class="pre">pandas.DataFrame.to_latex</span></code></dt><dd><p>Built-in (less specialized) LaTeX export.</p>
</dd>
</dl>
</div>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
</section>
<section id="module-NaivePyDECOMP.YAMLLoader">
<span id="naivepydecomp-yamlloader-module"></span><h2>NaivePyDECOMP.YAMLLoader module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Module: Configuration Pre-Processor for Model Inputs</p>
<section id="id29">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id30">
<h3>Description</h3>
<p>Utilities to load and normalize model configuration files (YAML/JSON) before
instantiating optimization models. The module provides:</p>
<ol class="arabic simple">
<li><p>A LaTeX-friendly renaming utility for unit identifiers, preserving downstream
compatibility with report/plot labels.</p></li>
<li><p>A deep-copy pre-processor that standardizes sections and optionally transforms
unit names and their upstreams references.</p></li>
<li><p>A YAML loader that combines parsing and pre-processing into a single entry point.</p></li>
</ol>
<p>This pre-processing ensures consistent, side-effect-free structures that are
directly consumable by subsequent builders (hydro, thermal, renewable, storage).</p>
</section>
<section id="id31">
<h3>Functions</h3>
<dl class="simple">
<dt>key_replace(key)</dt><dd><p>Convert identifiers for LaTeX.</p>
</dd>
<dt>pre_process(config_dict, transform_names=True)</dt><dd><p>Deep-copy and normalize a configuration dictionary, optionally transforming
unit names and upstream references in sections that contain units.</p>
</dd>
<dt>yaml_loader(file, transform_names=True)</dt><dd><p>Load a YAML file and return a processed configuration dictionary suitable
for model building.</p>
</dd>
</dl>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>Only the <strong>first</strong> underscore in an identifier is used to create the subscript;
remaining underscores are kept verbatim inside the subscript block.</p></li>
<li><p>Sections without a units field are copied verbatim.</p></li>
<li><p>All operations are performed on deep copies; the original inputs are not modified.</p></li>
</ul>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">cfg</span> <span class="o">=</span> <span class="n">yaml_loader</span><span class="p">(</span><span class="s2">&quot;case.yaml&quot;</span><span class="p">,</span> <span class="n">transform_names</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="s2">&quot;hydro&quot;</span><span class="p">][</span><span class="s2">&quot;units&quot;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="go">[&#39;{UHE_{1}}&#39;, &#39;{UHE_{2}}&#39;]</span>
</pre></div>
</div>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>