<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>NaivePyDECOMP.ThermalGenerator package</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="naivepydecomp-thermalgenerator-package">
<h1>NaivePyDECOMP.ThermalGenerator package</h1>
<section id="module-NaivePyDECOMP.ThermalGenerator">
<span id="module-contents"></span><h2>Module contents</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Package: Thermal Generation Modeling (ThermalGenerator)</p>
<section id="author">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="description">
<h3>Description</h3>
<p>The <strong>ThermalGenerator</strong> package provides a modular framework for modeling
thermal generation units in Pyomo-based unit commitment and dispatch models.
It includes data structures, sets, parameters, variables, constraints,
objectives, and builder functions for both quadratic (MIQP) and piecewise-linear
(MILP) cost formulations.</p>
</section>
<section id="submodules">
<h3>Submodules</h3>
<dl class="simple">
<dt>ThermalDataTypes</dt><dd><p>Dataclasses defining thermal unit parameters and system-wide data.</p>
</dd>
<dt>ThermalVars</dt><dd><p>Initialization routines for Pyomo sets, parameters, and variables.</p>
</dd>
<dt>ThermalConstraints</dt><dd><p>Constraint builders (balance, capacity, reserve, ramping, min up/down).</p>
</dd>
<dt>ThermalObjectives</dt><dd><p>Objective function definitions (quadratic and piecewise-linear).</p>
</dd>
<dt>ThermalPiecewiseCost</dt><dd><p>Utilities for building piecewise-linear cost functions.</p>
</dd>
<dt>ThermalBuilder</dt><dd><p>High-level routines to assemble complete thermal generation models.</p>
</dd>
</dl>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>Supports MIQP and MILP formulations, enabling flexibility in solver choice.</p></li>
<li><p>Reserve, emissions, and startup/shutdown costs can be included as needed.</p></li>
<li><p>Designed for interoperability with Hydro, Renewable, and Storage packages
to support hybrid hydrothermal-renewable models.</p></li>
</ul>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
</section>
<section id="id1">
<h2>Submodules</h2>
</section>
<section id="module-NaivePyDECOMP.ThermalGenerator.ThermalConstraints">
<span id="naivepydecomp-thermalgenerator-thermalconstraints-module"></span><h2>NaivePyDECOMP.ThermalGenerator.ThermalConstraints module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Thermal Unit Commitment — Constraints</p>
<section id="id2">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id3">
<h3>Description</h3>
<p>Constraint builders for thermal unit commitment (UC) formulations in Pyomo.
Each function attaches a specific block of constraints to a
ConcreteModel, enabling modular construction of MILP/MIQP/MINLP UC
models. The naming convention uses the thermal_* prefix for variables,
parameters, and constraint blocks attached to the model.</p>
</section>
<section id="constraint-families">
<h3>Constraint Families</h3>
<ol class="arabic simple">
<li><p>Balance (system-wide):</p>
<ul class="simple">
<li><p>sum_g thermal_p[g,t] + D[t] = d[t]</p></li>
</ul>
</li>
<li><p>Capacity (per unit and period):</p>
<ul class="simple">
<li><p>Lower bound: thermal_Pmin[g] * thermal_u[g,t] &lt;= thermal_p[g,t]</p></li>
<li><p>Upper bound: thermal_p[g,t] &lt;= thermal_Pmax[g] * thermal_u[g,t]</p></li>
</ul>
</li>
</ol>
</section>
<section id="usage">
<h3>Usage</h3>
<p>Combine these builders with:</p>
<ul class="simple">
<li><p>set/parameter/variable definitions for thermal UC, and</p></li>
<li><p>an appropriate objective (quadratic or piecewise linear).</p></li>
</ul>
<p>By composing the blocks, one can construct MIQP (quadratic costs) or
MILP (piecewise linear costs) UC formulations, optionally with reserve constraints.</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalConstraints.thermal_add_balance_constraint">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalConstraints.</span></span><span class="sig-name descname"><span class="pre">thermal_add_balance_constraint</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add the system-wide energy balance constraint.</p>
<p>For each period t, the total thermal generation plus the deficit
must match the demand:</p>
<blockquote>
<div><p>sum_g thermal_p[g,t] + D[t] == d[t]</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>m</strong> (<em>pyomo.environ.ConcreteModel</em>) – Pyomo model with thermal parameters and variables</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated model with constraint block
m.thermal_balance_constraint.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="c1"># Assume m has sets/vars/params defined; then:</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">_</span> <span class="o">=</span> <span class="n">thermal_add_balance_constraint</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">thermal_balance_constraint</span><span class="o">.</span><span class="n">pprint</span><span class="p">()</span>  
</pre></div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalConstraints.thermal_add_capacity_constraint">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalConstraints.</span></span><span class="sig-name descname"><span class="pre">thermal_add_capacity_constraint</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">include_reserve</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">bool</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add generation capacity limits for all units and periods.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>m</strong> (<em>pyomo.environ.ConcreteModel</em>) – Model containing thermal parameters and variables</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated model with constraint blocks
m.thermal_cap_lower_constraint and
m.thermal_cap_upper_constraint.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">_</span> <span class="o">=</span> <span class="n">thermal_add_capacity_constraint</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</pre></div>
</div>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.ThermalGenerator.ThermalDataTypes">
<span id="naivepydecomp-thermalgenerator-thermaldatatypes-module"></span><h2>NaivePyDECOMP.ThermalGenerator.ThermalDataTypes module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Thermal Unit Commitment — Data Structures and Problem Skeleton</p>
<section id="id4">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id5">
<h3>Description</h3>
<p>This module defines the canonical data structures for short-term thermal
unit commitment (UC) and economic dispatch problems. It is designed to be
paired with Pyomo model builders that assemble:</p>
<ul class="simple">
<li><p>Mixed-Integer Quadratic Programs (MIQP) with quadratic variable cost
a * u + b * p + c * p² and start-up cost SC * y.</p></li>
<li><p>Mixed-Integer Linear Programs (MILP) using piecewise-linear (PWL) cost
curves via SOS2/convex-combination.</p></li>
<li><p>Optional spinning reserve coupling and global emissions/fuel caps.</p></li>
</ul>
</section>
<section id="notation-per-unit-g-and-time-t">
<h3>Notation (per unit g and time t)</h3>
<p>Decision variables (model side):</p>
<blockquote>
<div><p>u_{g,t} in {0,1}   : on/off state
y_{g,t}, w_{g,t}  : start-up / shut-down flags (binary)
p_{g,t} &gt;= 0       : electrical output (MW)
r_{g,t} &gt;= 0       : spinning reserve (MW, optional)
D_t &gt;= 0           : demand deficit (MW, optional)</p>
</div></blockquote>
<p>Core parameters (this module):</p>
<blockquote>
<div><p>Pmin_g, Pmax_g    : power bounds (MW)
RU_g, RD_g        : ramp-up / ramp-down limits (MW/Δt)
a_g, b_g, c_g     : cost coefficients for a * u + b * p + c * p²
SC_g              : hot start cost
t_up_g, t_down_g  : minimum up/down times (periods)
u0_g, p0_g        : initial state and output
pw_breaks, pw_costs : PWL points for variable cost C(p)
γ_g               : emissions factor (tCO₂/MWh), optional</p>
</div></blockquote>
</section>
<section id="typical-objective-miqp-form">
<h3>Typical objective (MIQP form)</h3>
<p>Minimize over t,g:</p>
<blockquote>
<div><p>sum ( a_g u_{g,t} + b_g p_{g,t} + c_g p_{g,t}^2 + SC_g y_{g,t} ) + C_def sum(D_t)</p>
</div></blockquote>
<p>subject to balance, capacity, ramping, min up/down, and (optionally)
reserve and emissions constraints.</p>
</section>
<section id="id6">
<h3>Usage</h3>
<ul class="simple">
<li><p><em>ThermalUnit</em>: describes a single thermal unit, including technical
limits, cost curve, start-up, ramping, and optional PWL and emissions.</p></li>
<li><p><em>ThermalData</em>: wraps the system horizon, hourly demand, the unit map,
and optional reserve/emissions settings to feed a Pyomo builder.</p></li>
</ul>
</section>
<section id="intended-pairing">
<h3>Intended pairing</h3>
<p>This module is agnostic to the specific Pyomo modeling choices. It is
compatible with builders that: (i) set MIQP objectives directly from
(a,b,c); or (ii) construct MILP PWL costs from (pw_breaks, pw_costs),
keeping a * u and SC * y in the linear objective.</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py class">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.</span></span><span class="sig-name descname"><span class="pre">ThermalData</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">horizon</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">demand</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span><span class="p"><span class="pre">[</span></span><span class="pre">int</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">float</span><span class="p"><span class="pre">]</span></span></span></em>, <em class="sig-param"><span class="n"><span class="pre">units</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span><span class="p"><span class="pre">[</span></span><span class="pre">str</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit"><span class="pre">ThermalUnit</span></a><span class="p"><span class="pre">]</span></span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Cdef</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">float</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">1000.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></p>
<p>System-wide data container for thermal unit commitment problems.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>horizon</strong> (<em>int</em>) – Number of time periods in the planning horizon.</p></li>
<li><p><strong>demand</strong> (<em>Dict</em><em>[</em><em>int</em><em>, </em><em>float</em><em>]</em>) – Mapping of each period <code class="docutils literal notranslate"><span class="pre">t</span></code> to system demand (MW).</p></li>
<li><p><strong>units</strong> (<em>Dict</em><em>[</em><em>str</em><em>, </em><a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit"><em>ThermalUnit</em></a><em>]</em>) – Dictionary mapping unit identifiers to their <code class="docutils literal notranslate"><span class="pre">ThermalUnit</span></code> objects.</p></li>
<li><p><strong>Cdef</strong> (<em>float</em><em>, </em><em>optional</em>) – Deficit penalty cost ($/MWh), default is 1000.0.</p></li>
</ul>
</dd>
</dl>
<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.Cdef">
<span class="sig-name descname"><span class="pre">Cdef</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">float</span></em><em class="property"><span class="w"> </span><span class="p"><span class="pre">=</span></span><span class="w"> </span><span class="pre">1000.0</span></em></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.demand">
<span class="sig-name descname"><span class="pre">demand</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">Dict</span><span class="p"><span class="pre">[</span></span><span class="pre">int</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><span class="pre">float</span><span class="p"><span class="pre">]</span></span></em></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.horizon">
<span class="sig-name descname"><span class="pre">horizon</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">int</span></em></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData.units">
<span class="sig-name descname"><span class="pre">units</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">Dict</span><span class="p"><span class="pre">[</span></span><span class="pre">str</span><span class="p"><span class="pre">,</span></span><span class="w"> </span><a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit"><span class="pre">ThermalUnit</span></a><span class="p"><span class="pre">]</span></span></em></dt>
<dd></dd></dl>

</dd></dl>

<dl class="py class">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.</span></span><span class="sig-name descname"><span class="pre">ThermalUnit</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">name</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">str</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Gmin</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">float</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Gmax</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">float</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">Cost</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">float</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Bases: <code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></p>
<p>Data container for a thermal generating unit with unit commitment attributes.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>name</strong> (<em>str</em>) – Unique identifier of the thermal unit.</p></li>
<li><p><strong>Gmin</strong> (<em>float</em>) – Minimum operating power output (MWh).</p></li>
<li><p><strong>Gmax</strong> (<em>float</em>) – Maximum operating power output (MWh).</p></li>
<li><p><strong>Cost</strong> (<em>float</em>) – Operation cost per MWh</p></li>
</ul>
</dd>
</dl>
<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.Cost">
<span class="sig-name descname"><span class="pre">Cost</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">float</span></em></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.Gmax">
<span class="sig-name descname"><span class="pre">Gmax</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">float</span></em></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.Gmin">
<span class="sig-name descname"><span class="pre">Gmin</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">float</span></em></dt>
<dd></dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalUnit.name">
<span class="sig-name descname"><span class="pre">name</span></span><em class="property"><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="pre">str</span></em></dt>
<dd></dd></dl>

</dd></dl>

</section>
<section id="module-NaivePyDECOMP.ThermalGenerator.ThermalEquations">
<span id="naivepydecomp-thermalgenerator-thermalequations-module"></span><h2>NaivePyDECOMP.ThermalGenerator.ThermalEquations module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Thermal Model Expression Utilities for Pyomo Optimization</p>
<section id="id7">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id8">
<h3>Description</h3>
<p>This module provides helper functions to construct symbolic expressions
related to thermal power generation in Pyomo models. These expressions
can be incrementally assembled and used in constraints (e.g., power balance)
or in the objective function (e.g., cost minimization).</p>
<p>Functions are designed to be modular and composable, allowing the user to
build lists of partial expressions from multiple sources (e.g., thermal,
hydro, renewable, storage) and sum them later into complete constraints
or cost functions.</p>
<p>All functions operate safely: they first verify the presence of required
model components (e.g., sets, variables, parameters) before contributing
expressions. If components are missing, the expressions are skipped
silently, enabling flexible model composition.</p>
</section>
<section id="intended-use">
<h3>Intended Use</h3>
<ul class="simple">
<li><p>To support modular construction of the objective function, especially
when not all energy sources are known in advance.</p></li>
<li><p>To build power balance equations at each time step by aggregating
contributions from thermal and other sources.</p></li>
</ul>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">cost_terms</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">add_thermal_cost_expression</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">cost_terms</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">model</span><span class="o">.</span><span class="n">TotalCost</span> <span class="o">=</span> <span class="n">Objective</span><span class="p">(</span><span class="n">expr</span><span class="o">=</span><span class="nb">sum</span><span class="p">(</span><span class="n">cost_terms</span><span class="p">),</span> <span class="n">sense</span><span class="o">=</span><span class="n">minimize</span><span class="p">)</span>
</pre></div>
</div>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">balance_terms</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">add_thermal_balance_expression</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">balance_terms</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">model</span><span class="o">.</span><span class="n">BalanceConstraint</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">Constraint</span><span class="p">(</span><span class="n">expr</span><span class="o">=</span><span class="nb">sum</span><span class="p">(</span><span class="n">balance_terms</span><span class="p">)</span> <span class="o">==</span> <span class="n">model</span><span class="o">.</span><span class="n">Demand</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</pre></div>
</div>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>All expressions returned are Pyomo symbolic expressions.</p></li>
<li><p>This module assumes the model follows the naming convention:
‘thermal_p’, ‘thermal_Cost’, etc.</p></li>
</ul>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalEquations.add_thermal_balance_expression">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalEquations.</span></span><span class="sig-name descname"><span class="pre">add_thermal_balance_expression</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">t</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Any</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">balance_array</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></span></dt>
<dd><p>Append the thermal generation expression at a given time step t
to the balance equation expression list.</p>
<p>This is intended for use in constructing hybrid or modular power
balance constraints where multiple sources (thermal, hydro, solar, etc.)
contribute to the total injected power at each time step.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>m</strong> (<em>ConcreteModel</em>) – Pyomo model containing the thermal variables.</p></li>
<li><p><strong>t</strong> (<em>int</em>) – Time index for which the expression should be generated.</p></li>
<li><p><strong>balance_array</strong> (<em>list</em><em> of </em><em>expressions</em>) – List of symbolic expressions to which the thermal component is appended.</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated list including the thermal power contribution at time t.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>list of expressions</p>
</dd>
</dl>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalEquations.add_thermal_cost_expression">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalEquations.</span></span><span class="sig-name descname"><span class="pre">add_thermal_cost_expression</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cost_array</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">List</span><span class="p"><span class="pre">[</span></span><span class="pre">Any</span><span class="p"><span class="pre">]</span></span></span></span></dt>
<dd><p>Append thermal generation cost terms to the total cost expression list,
if the required model components are present.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>m</strong> (<em>ConcreteModel</em>) – Pyomo model instance containing thermal data.</p></li>
<li><p><strong>cost_array</strong> (<em>list</em><em> of </em><em>expressions</em>) – List of symbolic expressions to be used in the objective function.</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated list including thermal cost terms if available.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>list of expressions</p>
</dd>
</dl>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder">
<span id="naivepydecomp-thermalgenerator-thermalgeneratorbuilder-module"></span><h2>NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Thermal Unit Commitment — Model Builder</p>
<section id="id9">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id10">
<h3>Description</h3>
<p>This module provides a high-level builder function for thermal UC models.
It orchestrates the composition of Pyomo model objects by combining:</p>
<ul class="simple">
<li><p>Sets and parameters (<em>thermal_components.thermal_add_sets_and_params</em>)</p></li>
<li><p>Variables (<em>thermal_components.thermal_add_variables_uc</em>)</p></li>
<li><p>Constraint families (<em>thermal_constraints</em>)</p></li>
<li><p>Objective functions (<em>thermal_objectives</em>)</p></li>
<li><dl class="simple">
<dt>Optional features:</dt><dd><ul>
<li><p>Reserve provision and requirement constraints</p></li>
<li><p>Emissions/fuel caps</p></li>
<li><p>Piecewise-linear (PWL) variable cost representation</p></li>
</ul>
</dd>
</dl>
</li>
</ul>
</section>
<section id="builder-function">
<h3>Builder Function</h3>
<p><em>build_thermal_uc(data, objective, include_reserve, include_objective)</em></p>
<p>Parameters:</p>
<ul class="simple">
<li><p>data            : ThermalData object with horizon, demand, and unit info</p></li>
<li><p>objective       : “miqp” (quadratic) or “pwl” (piecewise linear)</p></li>
<li><p>include_reserve : bool, add reserve variables/constraints if True</p></li>
<li><p>include_objective : bool, add objective function</p></li>
</ul>
<p>Returns:</p>
<ul class="simple">
<li><p>A fully assembled Pyomo ConcreteModel ready to be solved by MILP/MIQP solvers
(e.g., Gurobi, CPLEX, SCIP) or MINLP solvers (via MindtPy with glpk/Ipopt).</p></li>
</ul>
</section>
<section id="id11">
<h3>Usage</h3>
<p>This is the main entry point to generate UC test cases from ThermalData
instances. It ensures consistency across modules and allows easy switching
between formulations.</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.add_thermal_problem">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.</span></span><span class="sig-name descname"><span class="pre">add_thermal_problem</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><span class="pre">ThermalData</span></a></span></em>, <em class="sig-param"><span class="n"><span class="pre">include_objective</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">bool</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd><p>Assemble a thermal unit-commitment (UC) problem in Pyomo.</p>
<p>This builder configures a thermal UC optimization model by attaching sets,
parameters, decision variables, and standard operational constraints. It
supports both MIQP (quadratic cost) and PWL (piecewise linear cost)
formulations, with optional reserve requirements and objective definition.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>m</strong> (<em>pyomo.environ.ConcreteModel</em>) – Pyomo model to which the thermal UC problem will be added.</p></li>
<li><p><strong>data</strong> (<a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><em>ThermalData</em></a>) – Input data structure containing unit characteristics, cost parameters,
horizon length, demand, reserve requirements, and initial conditions.</p></li>
<li><p><strong>include_objective</strong> (<em>bool</em><em>, </em><em>optional</em>) – If True, attach the cost-minimization objective function
appropriate for the chosen cost type (default False).</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated model with thermal UC constraints and, if enabled,
the objective function.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span><span class="w"> </span><span class="nn">pyomo.environ</span><span class="w"> </span><span class="kn">import</span> <span class="n">ConcreteModel</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">ConcreteModel</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">add_thermal_problem</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">objective</span><span class="o">=</span><span class="s2">&quot;miqp&quot;</span><span class="p">,</span>
<span class="gp">... </span>                        <span class="n">include_objective</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="go">&lt;class &#39;pyomo.core.base.PyomoModel.ConcreteModel&#39;&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.add_thermal_subproblem">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.</span></span><span class="sig-name descname"><span class="pre">add_thermal_subproblem</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><span class="pre">ThermalData</span></a></span></em>, <em class="sig-param"><span class="n"><span class="pre">stage</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">int</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd><p>Assemble a thermal unit-commitment (UC) subproblem in Pyomo.</p>
<p>This builder configures a thermal UC optimization model by attaching sets,
parameters, decision variables, and standard operational constraints. It
supports both MIQP (quadratic cost) and PWL (piecewise linear cost)
formulations, with optional reserve requirements and objective definition.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>m</strong> (<em>pyomo.environ.ConcreteModel</em>) – Pyomo model to which the thermal UC problem will be added.</p></li>
<li><p><strong>data</strong> (<a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><em>ThermalData</em></a>) – Input data structure containing unit characteristics, cost parameters,
horizon length, demand, reserve requirements, and initial conditions.</p></li>
<li><p><strong>stage</strong> (<em>int</em>) – the stage subproblem, informed for data copying</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated model with thermal UC constraints and, if enabled,
the objective function.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span><span class="w"> </span><span class="nn">pyomo.environ</span><span class="w"> </span><span class="kn">import</span> <span class="n">ConcreteModel</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">ConcreteModel</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">add_thermal_problem</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">objective</span><span class="o">=</span><span class="s2">&quot;miqp&quot;</span><span class="p">,</span>
<span class="gp">... </span>                        <span class="n">include_objective</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="go">&lt;class &#39;pyomo.core.base.PyomoModel.ConcreteModel&#39;&gt;</span>
</pre></div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.build_thermal_uc">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.</span></span><span class="sig-name descname"><span class="pre">build_thermal_uc</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><span class="pre">ThermalData</span></a></span></em>, <em class="sig-param"><span class="n"><span class="pre">include_objective</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">bool</span></span><span class="w"> </span><span class="o"><span class="pre">=</span></span><span class="w"> </span><span class="default_value"><span class="pre">True</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd><p>Builds a modular thermal Unit Commitment (UC) Pyomo model.</p>
<p>This function integrates all sets, parameters, variables,
constraints, and objectives required for the thermal UC problem.
The model may be constructed with either a quadratic cost
function (MIQP) or a piecewise linear cost approximation (PWL).
Optional constraints for spinning reserve and global emissions
caps are also supported.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>data</strong> (<em>object</em>) – <p>Data container providing unit and system information.
Must include:</p>
<ul>
<li><p>demand profile</p></li>
<li><p>unit technical parameters (min/max power, ramps,
minimum up/down times, costs, etc.)</p></li>
</ul>
</p></li>
<li><p><strong>include_objective</strong> (<em>optional</em><em>, </em><em>bool</em>) – hj</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>A fully constructed Pyomo model ready for solving
with a MILP/MIQP solver.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span><span class="w"> </span><span class="nn">pyomo.opt</span><span class="w"> </span><span class="kn">import</span> <span class="n">SolverFactory</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span><span class="w"> </span><span class="nn">NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder</span><span class="w"> </span><span class="kn">import</span> <span class="n">build_thermal_uc</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">model</span> <span class="o">=</span> <span class="n">build_thermal_uc</span><span class="p">(</span>
<span class="gp">... </span>    <span class="n">data</span>
<span class="gp">... </span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">opt</span> <span class="o">=</span> <span class="n">SolverFactory</span><span class="p">(</span><span class="s2">&quot;gurobi&quot;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">results</span> <span class="o">=</span> <span class="n">opt</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">results</span><span class="o">.</span><span class="n">solver</span><span class="o">.</span><span class="n">termination_condition</span><span class="p">)</span>
<span class="go">optimal</span>
</pre></div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.thermo_update_model">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalGeneratorBuilder.</span></span><span class="sig-name descname"><span class="pre">thermo_update_model</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">Dict</span></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd></dd></dl>

</section>
<section id="module-NaivePyDECOMP.ThermalGenerator.ThermalObjectives">
<span id="naivepydecomp-thermalgenerator-thermalobjectives-module"></span><h2>NaivePyDECOMP.ThermalGenerator.ThermalObjectives module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Thermal Unit Commitment — Objectives</p>
<section id="id12">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id13">
<h3>Description</h3>
<p>Objective functions for thermal unit-commitment (UC) models in Pyomo.</p>
</section>
<section id="id14">
<h3>Usage</h3>
<ul class="simple">
<li><p>Call <em>set_objective_thermo_miqp(m)</em> for the quadratic-cost UC model.
Both functions attach a Pyomo <em>Objective</em> set for minimization.</p></li>
</ul>
<p class="rubric">Notes</p>
<ul class="simple">
<li><p>Ensure unit consistency for costs (e.g., $/h vs $/MWh) and for power/energy.</p></li>
<li><p>The functions assume that all referenced sets, variables and parameters
have been previously added to the model.</p></li>
</ul>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalObjectives.set_objective_thermo">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalObjectives.</span></span><span class="sig-name descname"><span class="pre">set_objective_thermo</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Define the medium-term thermal objective.</p>
<p>Minimizes the total operating cost over the planning horizon, composed of:
- Linear thermal generation cost: Cg[g] * G[g,t]
- Deficit penalty: Cdef * Def[t]</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>m</strong> (<em>pyomo.environ.ConcreteModel</em>) – <p>Pyomo model with:</p>
<ul class="simple">
<li><p>Sets: m.TG (thermal units), m.T (stages)</p></li>
<li><dl class="simple">
<dt>Variables:</dt><dd><p>m.thermal_G[g,t] (MW), m.Def[t] (MW)</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>Parameters:</dt><dd><p>m.thermal_C[g] (US$/MWh), m.Cdef (deficit penalty)</p>
</dd>
</dl>
</li>
</ul>
</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>Model with objective m.OBJ set to minimize total cost.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">_</span> <span class="o">=</span> <span class="n">set_objective_decomp</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">OBJ</span><span class="o">.</span><span class="n">pprint</span><span class="p">()</span>
</pre></div>
</div>
</dd></dl>

</section>
<section id="module-NaivePyDECOMP.ThermalGenerator.ThermalVars">
<span id="naivepydecomp-thermalgenerator-thermalvars-module"></span><h2>NaivePyDECOMP.ThermalGenerator.ThermalVars module</h2>
<p>EELT 7030 — Operation and Expansion Planning of Electric Power Systems
Federal University of Paraná (UFPR)</p>
<p>Thermal Unit Commitment — Sets, Parameters and Variables</p>
<section id="id15">
<h3>Author</h3>
<p>Augusto Mathias Adams &lt;<a class="reference external" href="mailto:augusto&#46;adams&#37;&#52;&#48;ufpr&#46;br">augusto<span>&#46;</span>adams<span>&#64;</span>ufpr<span>&#46;</span>br</a>&gt;</p>
</section>
<section id="id16">
<h3>Description</h3>
<p>This module provides the Pyomo set/parameter declarations and variable
definitions for thermal unit commitment (UC) models. It is intended to
be combined with constraint and objective builder modules.</p>
</section>
<section id="features">
<h3>Features</h3>
<ul class="simple">
<li><p>Time horizon (T) and thermal unit set (G)</p></li>
<li><p>Demand profile d[t] and deficit penalty Cdef</p></li>
<li><dl class="simple">
<dt>Unit-level parameters:</dt><dd><ul>
<li><p>Pmin, Pmax  : capacity bounds</p></li>
<li><p>RU, RD      : ramp-up / ramp-down limits</p></li>
<li><p>a, b, c     : cost coefficients for MIQP (a * u + b * p + c * p²)</p></li>
<li><p>SC          : start-up (hot) cost</p></li>
<li><p>t_up, t_dn  : minimum up/down times</p></li>
<li><p>u0, p0      : initial commitment state and output</p></li>
</ul>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>Optional system-wide parameters:</dt><dd><ul>
<li><p>Rreq[t]     : spinning reserve requirement</p></li>
<li><p>gamma[g]    : emissions factor</p></li>
<li><p>CO2Cap      : global emission/fuel cap</p></li>
</ul>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>Optional piecewise data:</dt><dd><ul>
<li><p>pw_breaks[g], pw_costs[g] : piecewise linear cost curve points</p></li>
</ul>
</dd>
</dl>
</li>
</ul>
</section>
<section id="variables">
<h3>Variables</h3>
<ul class="simple">
<li><p>p[g,t] : generation (MW)</p></li>
<li><p>D[t]   : deficit (MW)</p></li>
<li><p>r[g,t] : reserve (MW, optional)</p></li>
<li><p>Cvar[g,t] : variable cost in PWL formulations (optional)</p></li>
<li><p>u[g,t] : on/off state (binary)</p></li>
<li><p>y[g,t] : start-up indicator (binary)</p></li>
<li><p>w[g,t] : shut-down indicator (binary)</p></li>
</ul>
</section>
<section id="id17">
<h3>Usage</h3>
<p>Call <em>thermal_add_sets_and_params(m, data)</em> to populate a Pyomo model with
sets and parameters from a ThermalData object.</p>
<p>Call <em>thermal_add_variables_uc(m, include_reserve=True/False, use_pwl=True/False)</em>
to attach decision variables for UC formulations (MIQP or MILP-PWL).</p>
<p class="rubric">References</p>
<p>[1] CEPEL, DESSEM. Manual de Metodologia, 2023
[2] Unsihuay Vila, C. Introdução aos Sistemas de Energia Elétrica, Lecture Notes, EELT7030/UFPR, 2023.</p>
</section>
<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalVars.thermal_add_sets_and_params">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalVars.</span></span><span class="sig-name descname"><span class="pre">thermal_add_sets_and_params</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><span class="pre">ConcreteModel</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">data</span></span><span class="p"><span class="pre">:</span></span><span class="w"> </span><span class="n"><a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><span class="pre">ThermalData</span></a></span></em><span class="sig-paren">)</span> <span class="sig-return"><span class="sig-return-icon">&#x2192;</span> <span class="sig-return-typehint"><span class="pre">ConcreteModel</span></span></span></dt>
<dd><p>Initializes sets and parameters for the thermal Unit Commitment (UC) model.</p>
<p>This function maps unit-level data (technical parameters, costs,
initial conditions, optional reserve and emissions information,
and piecewise cost segments) into Pyomo sets and parameters.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>m</strong> (<em>pyomo.environ.ConcreteModel</em>) – Pyomo model to be enriched with sets and parameters.</p></li>
<li><p><strong>data</strong> (<a class="reference internal" href="#NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData" title="NaivePyDECOMP.ThermalGenerator.ThermalDataTypes.ThermalData"><em>ThermalData</em></a>) – <p>Data container with attributes:</p>
<ul>
<li><p>horizon : int</p>
<blockquote>
<div><p>Number of time periods.</p>
</div></blockquote>
</li>
<li><p>demand : dict</p>
<blockquote>
<div><p>Demand profile indexed by time.</p>
</div></blockquote>
</li>
<li><p>Cdef : float</p>
<blockquote>
<div><p>Cost of deficit ($/MWh).</p>
</div></blockquote>
</li>
<li><p>units : dict</p>
<blockquote>
<div><p>Dictionary keyed by unit id, each with attributes
Pmin, Pmax, RU, RD, a, b, c, SC, t_up, t_down, u0, p0,
gamma (optional), pw_breaks (optional), pw_costs (optional).</p>
</div></blockquote>
</li>
<li><p>Rreq : dict, optional</p>
<blockquote>
<div><p>Reserve requirement per period.</p>
</div></blockquote>
</li>
</ul>
</p></li>
</ul>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p>The updated model with sets <strong>m.T, m.TG</strong> and all unit/system parameters.</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span><span class="w"> </span><span class="nn">pyomo.environ</span><span class="w"> </span><span class="kn">import</span> <span class="n">ConcreteModel</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">ConcreteModel</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">thermal_add_sets_and_params</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">TG</span><span class="p">)</span>
<span class="go">[&#39;UT1&#39;, &#39;UT2&#39;, &#39;UT3&#39;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="go">500.0</span>
</pre></div>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="NaivePyDECOMP.ThermalGenerator.ThermalVars.thermal_add_variables_uc">
<span class="sig-prename descclassname"><span class="pre">NaivePyDECOMP.ThermalGenerator.ThermalVars.</span></span><span class="sig-name descname"><span class="pre">thermal_add_variables_uc</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">m</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Declares decision variables for the thermal Unit Commitment (UC) model.</p>
<p>Variables include continuous generation and deficit levels,
binary commitment/start/stop indicators, and optionally,
reserve and piecewise cost variables.</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters<span class="colon">:</span></dt>
<dd class="field-odd"><p><strong>m</strong> (<em>pyomo.environ.ConcreteModel</em>) – Model where variables will be added.</p>
</dd>
<dt class="field-even">Returns<span class="colon">:</span></dt>
<dd class="field-even"><p><p>The updated model with added decision variables:
- Continuous:</p>
<blockquote>
<div><ul class="simple">
<li><p><strong>m.p[g, t]</strong> : generation [MW].</p></li>
<li><p><strong>m.D[t]</strong> : deficit [MW].</p></li>
<li><p><strong>m.r[g, t]</strong> : reserve [MW], optional.</p></li>
<li><p><strong>m.Cvar[g, t]</strong> : piecewise cost variable, optional.</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>Binary:</p>
<ul>
<li><p><strong>m.u[g, t]</strong> : commitment (on/off).</p></li>
<li><p><strong>m.y[g, t]</strong> : startup indicator.</p></li>
<li><p><strong>m.w[g, t]</strong> : shutdown indicator.</p></li>
</ul>
</li>
</ul>
</p>
</dd>
<dt class="field-odd">Return type<span class="colon">:</span></dt>
<dd class="field-odd"><p>pyomo.environ.ConcreteModel</p>
</dd>
</dl>
<p class="rubric">Examples</p>
<div class="doctest highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span><span class="w"> </span><span class="nn">pyomo.environ</span><span class="w"> </span><span class="kn">import</span> <span class="n">ConcreteModel</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">ConcreteModel</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">thermal_add_sets_and_params</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">thermal_add_variables_uc</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">include_reserve</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">use_pwl</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">m</span><span class="o">.</span><span class="n">p</span><span class="p">[</span><span class="s1">&#39;UT1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pprint</span><span class="p">()</span>
<span class="go">Variable p[UT1,1]</span>
<span class="go">Domain: NonNegativeReals</span>
</pre></div>
</div>
<p class="rubric">Notes</p>
<p><strong>Reserve modeling (**include_reserve=True</strong>)**</p>
<ul class="simple">
<li><p><strong>Advantages</strong>: Captures spinning reserve obligations; ensures reliability
under contingencies; critical for adequacy/security studies.</p></li>
<li><p><strong>Trade-offs</strong>: Increases model size with additional variables
<strong>m.r[g, t]</strong> and constraints; may slow down MILP/MIQP solution.</p></li>
<li><p><strong>Guidance</strong>: Use if reserve margins are central to the study; omit in
purely economic dispatch tests for simplicity.</p></li>
</ul>
<p><strong>Piecewise costs (**use_pwl=True</strong>)**4</p>
<ul class="simple">
<li><p><strong>Advantages</strong>: Converts quadratic costs to MILP form; exploits strong
LP relaxations; often faster and more scalable on large systems.</p></li>
<li><p><strong>Trade-offs</strong>: Approximation error unless sufficient breakpoints are
used; adds SOS2 or convex-combination variables, increasing model size.</p></li>
<li><p><strong>Guidance</strong>: Use when quadratic costs cannot be handled efficiently
by the chosen solver, or when MILP-only solvers are required.</p></li>
</ul>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>